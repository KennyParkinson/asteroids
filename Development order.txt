Development order
	develop individual 				systems
	rendering, particle systems
input
networking
data persistence

develop game systems first, then game code


MILESTONES:
	1. move the ship, wraps around, renders
	2. objects moving, collisions, projectiles, particles
	3. AI

game code
	physics?
	ai
	input
	scoring
	object updates (movement)

-----------------------------
game engine/systems
	particle framework
	audio
	collisions
		Here's the objects, tell me what collided.
Rendering
input
networking
ai?
physics?
data persistence

Particle framework
array of particle systems

movement
bullets
ship
asteroids
particles
ufos
scoring
ai
particle systems
collision detection
	create a list for each object type, then test the ones that need to see if they collide

server runs the game model and sends the updates to the clients

score persistence on the server
audio
	explosions
	background music
	menu navigation
	ship sounds
rendering

Collision Detection:
	Use a sphere
	Test on a polygon by polygon basis
	Bounding box (similar to sphere)
	Axis Aligned Bounding box
	subdivision methods

	Polygon v polygon:
		split polygon into triangles, compare all triangles in one polygon against all polygons in another
	Bounding Box:
		Define a box around an object that defines the area it takes up. test box vs. box. As the object rotates, rotate the box as well
	Axis aligned BB: 
		Bounding box stays aligned with x and y axes. No rotating of the box. Less complex computation in box vs. box intersection.
	Circle:
		Compare the distance between the two centers of the objects vs the combined radii of each object
	Subdivision:
		Draw smaller circles inside the larger circles to  compensate for the irregularity of the object.

Kenny will work on:
	Change controls and Asteroid Splitting and rotation and add Lives and Audio
	Move ship to centerDONE, prevent asteroid spawn on centerDONE
